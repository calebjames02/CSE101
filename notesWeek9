3/3/25
Delete pseudocode

Transplant(T, u, v)
	Replace the subtree rooted at u in T with the subtree rooted at v
if u.parent == NIL # u is the root of t
	T.root = v
else if u == u.parent.left
	u.parent.left = v
else
	u.parent.right = v
if v != NIL
	v.parent = u.parent

Delete(T, z)
if z.left == NIL # case 1 or case 2.1 (right only)
	Trnasplant(T, z, z.right)
else if z.right == NIL # case 2.2 (left only)
	Transplant(T, z, z.left)
else
	y = TreeMinimum(z.right)
	if y.parent != z
		Transplant(T, y, y.right)
		y.right = z.right
		y.right.parent = y
	Transplant(T, z, y)
	y.left = z.left
	y.left.parent = y

3/5/25
Red Black Trees
Used to get a better worst case runtime when compared to a BST

RBT properties
1. each node is either red or black
2. root is black
3. each leaf (i.e. nil children) is considered black
4. each red node has two black children, one or both of which could be nil
	equivalently, no descending path has two reds in a row
5. for any node x, every path descending from x to a leaf contains the same number of black nodes

The black height of x, bh(x) is the # of black ndoes in a descending path from x to a leaf, not counting x itself

3/7/25
A RBT with n internal (i.e. non-nil) nodes, and height h satisfies
	h <= lg(n + 1)
any Binary Tree satisfies
	h >= floor(log(n))
Therefore, for a RBT
	floor(log(n)) <= h <= log(n + 1)
As such, all algorithms have worst case runtime h which is of logarithmic time

Right and left rotate do not preserve RBT properties, but they are also necessary to satisfy some of the properties
