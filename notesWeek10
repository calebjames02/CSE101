3/10/25
Heaps and priority queues
A priority queue is an ADT that maintains a finite set S of records, and each record has an attribute called a key

In dictionary, a key uniquely identifies the corresponding data (i.e. bank account number)
In priority queue, a key defines how important the record is (i.e. bank balance)
Priority queue maintins them in a way to prioritize the records with the highest priority

Two types of priority queues: Max PQ and min PQ
Max PQ has these operations
	Insert (S, x)
	Max(S) - Pure access function
	ExtractMax(S) - Combination access and delete function that returns and deletes record with maximum key
	IncreaseKey(S, x, k) - Changes key x to k if k > key[k]

Defintion: 
A complete binary tree (CBT) is a binary tree where all leaves have the same depth, and all internal nodes have two children
An almost complete binary tree (ACBT) is a binary tree that is filled at all levels except possibly the deepest level
	The deepest level would be filled from left to right
The number of nodes in an ACBT of height h must satisfy the following inequality, 2^h - 1 < n <= 2^(h + 1) - 1
	2^h <= n < 2^(h+1)
	h <= log_2(n) < h + 1
	h = floor(log_2(n))

Heaps
Preferred data structure to underly PQ

Binary Heap (Max, min)
A binary heap is an array object that represents an ACBT
The array has two attributes
	Length[A] - Total storage capacity for nodes
	Heap size[A] - Number of current nodes
Helper functions
	Parent(i) = floor(i / 2), for i >= 2
	Left(i) = 2i
	right(i) = 2i + 1
Heap properties
	Max heap property: A[Parent(i)] >= A[i]
	Min heap property: A[Parent(i)] <= A[i]


3/12/25
Max Heap Algorithms
Heapify - Recursive function that fixes heap properties starting from a certain node
	Causes heap properties to be satisfied at one specific node
	Call heapify on whatever node you swap with in current iteration of heapify
	Worst case runtime: floor(log_2(n)) or THETA(log(n))
BuildHeap - Constructor, takes an unordered array and orders it in a way to satisfy max heap property
	Call heapify on the root of an unordered array
	Runtime: THETA(n)
HeapSort
	First call BuildHeap, then the array is almost sorted
	Swap first and last element and exclude last element so the largest element is now at the end of the array
	One call to heapify will fix this and you can rinse and repeat until heap only has one element left and the array is now sorted
	Runtime - THETA(nlog(n))

PQ Operations
HeapMaximum/Minimum
	Return largest key, ie the root
	THETA(1)
HeapDeleteMax
	Swap root with right most leaf, decrement heap size, call heapify on root
	THETA(log(n))
HeapExtractMax - Pure manipulation procedure
	Saves maximum, deletes it, then returns what it saved
	THETA(log(n))
HeapIncreaseKey
	First figure out if given key is bigger than the key at the given index
		If it is then increase the key to the desired value
		Might create problems above that element you just changed
		While not at root and you have a violation between current element and it's parent
			Swap current element and it's parent then repeat
	THETA(log(n))


3/14/25
Single source shortest path problem in weighted graphs
BFS solves this, but doesn't work on weighted graphs
Weighted graph G = (V, E, w)
	Where w is a function from the edge set E to the real numbers
Weight of a path
	path = sequence of connected vertices
	Weight of a path = the sum of the weight of all edges in the path
S(x, y) - Shortest path between x and y
	Weight of a minimum path between the vertices x and y, so long as y is reachable from x
	Infinity in the case where y is not reachable from x

SSSP
Given a source vertex s
	2. determine delta(s, x) for all x in the vertex s
	2. For each x that is reachable from s, find a shortest s-x path
Two algorithms for this
Belman-Ford
Dijkstra (restricts to only positive edge weights)

Both find min-weight walks between two vertices (in a walk you can visit the same vertex/edge multiple times, which you can't do in a path)
Problem
Negative weight cycle reachable from the source
Can stay on the cycle infinitely to reach negative infinity
Dijkstra doesn't care because it doesn't accept negative weights
Belman-Ford doesn't allow negative weight cycles reachable from the source
	Returns true if there is no negative weight cycle reachable from the source

As in BFS, we have parent(x) and distance(x)
	distance(x) = distance estimate between s and x

Initialize(G, s)
	for all vertices in the vertex set,
		set distance(x) to inf
		set parent(x) to nil
	set distance(source) to 0
Relax(x, y)
	if(distance[y] > distance[x] + w(x, y)
		d[y] = d[x] + w(x, y)
		p[y] = x
	Trying to improve distance estimate to y
	What if taking another path that the one already taken is better, then change the chosen path

Dijkstra
	Initialize(G, s)
	S = { } - the set of discovered vertices
	Q = V(G) - create a Min Priority Queue with key[x] = d[x]
	while Q is not empty
		x = ExtractMin(Q)
		S = S union {x}
		for all y in adj[x]
			Relax(x, y)

	You don't need the stuff with S, it just makes it easier to prove its correctness
